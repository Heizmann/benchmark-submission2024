(set-info :smt-lib-version 2.6)
(set-logic ANIA)
(set-info :source |
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2024 [5,6].
This script may not contain all SMT commands that Ultimate Automizer
issued. In order to meet the restrictions for SMT-COMP benchmarks 
we dropped the commands for getting values (resp. models), 
unsatisfiable cores, and interpolants.

2024-04-13, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Max Barth, Daniel Dietsch, Leonard Fichtner,
     Jochen Hoenicke, Dominik Klumpp, Mehdi Naouar, Tanja Schindler,
     Frank Sch√ºssele, Andreas Podelski: Ultimate Automizer and the
     CommuHash Normal Form (Competition Contribution). TACAS 2023
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: State of the Art in Software Verification and
     Witness Validation: SV-COMP 2024.  TACAS 2024
[6] https://sv-comp.sosy-lab.org/2024/
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun |#memory_int_-1| () (Array Int (Array Int Int)))
(declare-fun |ULTIMATE.start_finddup_~a#1.offset_-1| () Int)
(declare-fun |ULTIMATE.start_finddup_~n#1_-1| () Int)
(declare-fun |ULTIMATE.start_finddup_~a#1.base_-1| () Int)
(declare-fun |ULTIMATE.start_finddup_~i~1#1_-1| () Int)
(declare-fun |ULTIMATE.start_finddup_~j~1#1_0| () Int)
(declare-fun |ULTIMATE.start_finddup_#t~mem9#1_1| () Int)
(declare-fun |ULTIMATE.start_finddup_#t~mem8#1_1| () Int)
(declare-fun |ULTIMATE.start_finddup_~j~1#1_3| () Int)
(declare-fun |ULTIMATE.start_finddup_#t~mem9#1_4| () Int)
(declare-fun |ULTIMATE.start_finddup_#t~mem8#1_4| () Int)
(declare-fun |ULTIMATE.start_finddup_~j~1#1_6| () Int)
(declare-fun |ULTIMATE.start_finddup_~i~1#1_8| () Int)
(assert (<= |ULTIMATE.start_finddup_~j~1#1_0| (+ |ULTIMATE.start_finddup_~i~1#1_-1| 1)))
(assert (>= |ULTIMATE.start_finddup_~j~1#1_0| (+ |ULTIMATE.start_finddup_~i~1#1_-1| 1)))
(assert (< |ULTIMATE.start_finddup_~i~1#1_-1| |ULTIMATE.start_finddup_~n#1_-1|))
(assert (<= |ULTIMATE.start_finddup_#t~mem8#1_1| (select (select |#memory_int_-1| |ULTIMATE.start_finddup_~a#1.base_-1|) (+ (* |ULTIMATE.start_finddup_~i~1#1_-1| 4) |ULTIMATE.start_finddup_~a#1.offset_-1|))))
(assert (>= |ULTIMATE.start_finddup_#t~mem8#1_1| (select (select |#memory_int_-1| |ULTIMATE.start_finddup_~a#1.base_-1|) (+ (* |ULTIMATE.start_finddup_~i~1#1_-1| 4) |ULTIMATE.start_finddup_~a#1.offset_-1|))))
(assert (<= |ULTIMATE.start_finddup_#t~mem9#1_1| (select (select |#memory_int_-1| |ULTIMATE.start_finddup_~a#1.base_-1|) (+ |ULTIMATE.start_finddup_~a#1.offset_-1| (* |ULTIMATE.start_finddup_~j~1#1_0| 4)))))
(assert (>= |ULTIMATE.start_finddup_#t~mem9#1_1| (select (select |#memory_int_-1| |ULTIMATE.start_finddup_~a#1.base_-1|) (+ |ULTIMATE.start_finddup_~a#1.offset_-1| (* |ULTIMATE.start_finddup_~j~1#1_0| 4)))))
(assert (< |ULTIMATE.start_finddup_~j~1#1_0| |ULTIMATE.start_finddup_~n#1_-1|))
(assert (not (= |ULTIMATE.start_finddup_#t~mem8#1_1| |ULTIMATE.start_finddup_#t~mem9#1_1|)))
(assert (<= |ULTIMATE.start_finddup_~j~1#1_3| (+ |ULTIMATE.start_finddup_~j~1#1_0| 1)))
(assert (>= |ULTIMATE.start_finddup_~j~1#1_3| (+ |ULTIMATE.start_finddup_~j~1#1_0| 1)))
(assert (<= |ULTIMATE.start_finddup_#t~mem8#1_4| (select (select |#memory_int_-1| |ULTIMATE.start_finddup_~a#1.base_-1|) (+ (* |ULTIMATE.start_finddup_~i~1#1_-1| 4) |ULTIMATE.start_finddup_~a#1.offset_-1|))))
(assert (>= |ULTIMATE.start_finddup_#t~mem8#1_4| (select (select |#memory_int_-1| |ULTIMATE.start_finddup_~a#1.base_-1|) (+ (* |ULTIMATE.start_finddup_~i~1#1_-1| 4) |ULTIMATE.start_finddup_~a#1.offset_-1|))))
(assert (<= |ULTIMATE.start_finddup_#t~mem9#1_4| (select (select |#memory_int_-1| |ULTIMATE.start_finddup_~a#1.base_-1|) (+ |ULTIMATE.start_finddup_~a#1.offset_-1| (* |ULTIMATE.start_finddup_~j~1#1_3| 4)))))
(assert (>= |ULTIMATE.start_finddup_#t~mem9#1_4| (select (select |#memory_int_-1| |ULTIMATE.start_finddup_~a#1.base_-1|) (+ |ULTIMATE.start_finddup_~a#1.offset_-1| (* |ULTIMATE.start_finddup_~j~1#1_3| 4)))))
(assert (< |ULTIMATE.start_finddup_~j~1#1_3| |ULTIMATE.start_finddup_~n#1_-1|))
(assert (not (= |ULTIMATE.start_finddup_#t~mem8#1_4| |ULTIMATE.start_finddup_#t~mem9#1_4|)))
(assert (<= |ULTIMATE.start_finddup_~j~1#1_6| (+ |ULTIMATE.start_finddup_~j~1#1_3| 1)))
(assert (>= |ULTIMATE.start_finddup_~j~1#1_6| (+ |ULTIMATE.start_finddup_~j~1#1_3| 1)))
(assert (<= |ULTIMATE.start_finddup_~n#1_-1| |ULTIMATE.start_finddup_~j~1#1_6|))
(assert (<= (+ |ULTIMATE.start_finddup_~i~1#1_-1| 1) |ULTIMATE.start_finddup_~i~1#1_8|))
(assert (>= (+ |ULTIMATE.start_finddup_~i~1#1_-1| 1) |ULTIMATE.start_finddup_~i~1#1_8|))
(check-sat)
(exit)
